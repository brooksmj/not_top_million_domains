@version: 3.17
@include "scl.conf"

options { chain_hostnames(off); flush_lines(0); use_dns(no); use_fqdn(no);
          owner("root"); group("adm"); perm(0640); stats_freq(0); dns-cache(no);
          bad_hostname("^gconfd$");
};

parser domain_parser {
    python(
        class('DomainParser')
        options('offset', 21,
                'domain_file', '/etc/syslog-ng/majestic_million.csv',
                'whitelist_file', '/etc/syslog-ng/whitelist')
    );
};

source s_internal {
       system();
       internal();
};

source s_syslog {
    network(
        transport(tcp)
        port(514)
        flags(no-parse, dont-store-legacy-msghdr)
        );
};

destination d_messages {
        file("/var/log/messages");
};

destination d_syslog {
    tcp("<RECEIVER-IP>" port(514));
};


log {
    source(s_internal);
    destination(d_messages);
};

log {
    source(s_syslog);
    parser(domain_parser);
    destination(d_syslog);
};

python {
import shlex
from tld import get_fld

class DomainParser(object):
    def init(self, options):
        self.offset = int(options['offset'])
        self.domain_file = options['domain_file']
        self.whitelist_file = options['whitelist_file']

        try:
            with open(self.domain_file) as f:
                self.domains = f.readlines()
        except IOError:
            print('\nError: Unable to find required list of domains: {}\n'.format(self.domain_file))
            return False
        self.domains = [self.domain.split(',')[2].strip() for self.domain in self.domains]
        self.domains = set(self.domains)

        try:
            with open(self.whitelist_file) as f:
                self.whitelist = f.readlines()
                self.whitelist = [self.d.strip() for self.d in self.whitelist]
        except IOError:
            print('\nWarning: Whitelist file not found: {}\n'.format(WHITELIST_FILE))
        return True

    def parse(self, log):
        try:
            self.parsed_domain = shlex.split(log['MESSAGE'])[self.offset].strip()
            self.parsed_domain = get_fld(self.parsed_domain, fix_protocol=True, fail_silently=True)
        except IndexError:
            print('\nError: Unable to parse event: {}\n'.format(log['MESSAGE']))
            return False
        if self.parsed_domain is not None:
            if '_' in self.parsed_domain:
                return False
            if '.' not in self.parsed_domain:
                return False
            for self.domain in self.whitelist:
                if self.parsed_domain.endswith(self.domain):
                    print('\nFound on whitelist: {}\n'.format(self.parsed_domain))
                    return False
            if self.parsed_domain not in self.domains:
                log['MESSAGE'] = log['MESSAGE'] + ' Domain Not Found in Top Million '
                return True
            print('\nTop 1 million domain: {}\n'.format(self.parsed_domain))
            return False
};
